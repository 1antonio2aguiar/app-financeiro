{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BaseResourceService } from './../../../shared/services/base-resource.service';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Contatos } from './../../../shared/models/contatos';\nimport * as i0 from \"@angular/core\";\nexport let ContatosService = /*#__PURE__*/(() => {\n  class ContatosService extends BaseResourceService {\n    constructor(injector) {\n      super(environment.apiUrl + 'contatos', injector, Contatos.fromJson);\n      this.injector = injector;\n      this.header = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // Lista de contatos por pessoa\n      this.contatosEventHendler = new EventEmitter();\n      // Contatos por id\n      this.contatosEventHendlerId = new EventEmitter();\n    }\n    // Busca lista de contatos por pessoa\n    listAll(pessoa) {\n      //console.log(\"ESTA NO SERVICE \", pessoa)\n      return this.http.get(this.apiPath + '/findByPessoaId?pessoaId=' + pessoa).toPromise().then(response => {\n        this.contatosEventHendler.emit(response);\n      });\n    }\n    contatosChangeSubscribe(callBack) {\n      this.contatosEventHendler.subscribe(callBack);\n    }\n    // Busca contato por ID\n    buscaContato(contatoId) {\n      return this.http.get(this.apiPath + '/' + contatoId).toPromise().then(response => {\n        this.contatosEventHendlerId.emit(response);\n      });\n    }\n    contatosEditSubscribeId(callBack) {\n      this.contatosEventHendlerId.subscribe(callBack);\n    }\n    createContato(resource) {\n      return this.http.post(this.apiPath + '', resource, {\n        headers: this.header\n      }).toPromise().then(response => response);\n    }\n    updateContato(resource) {\n      return this.http.put(this.apiPath + '/' + JSON.parse(resource).id, resource, {\n        headers: this.header\n      }).toPromise().then(response => response);\n    }\n    deleteContato(id) {\n      return this.http.delete(this.apiPath + '/' + id).toPromise().then(response => response);\n    }\n    static #_ = this.ɵfac = function ContatosService_Factory(t) {\n      return new (t || ContatosService)(i0.ɵɵinject(i0.Injector));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ContatosService,\n      factory: ContatosService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ContatosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}