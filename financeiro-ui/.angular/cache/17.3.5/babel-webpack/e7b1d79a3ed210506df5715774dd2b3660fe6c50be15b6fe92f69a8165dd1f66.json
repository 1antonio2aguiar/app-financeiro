{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n// import { AuthService } from './auth.service';\nexport class NotAuthenticatedError {}\nexport let HelperHttp = /*#__PURE__*/(() => {\n  class HelperHttp extends HttpClient {\n    constructor(\n    //  private auth: AuthService,\n    httpHandler) {\n      super(httpHandler);\n      this.httpHandler = httpHandler;\n    }\n    delete(url, options) {\n      return this.fazerRequisicao(() => super.delete(url, options));\n    }\n    patch(url, body, options) {\n      return this.fazerRequisicao(() => super.patch(url, options));\n    }\n    head(url, options) {\n      return this.fazerRequisicao(() => super.head(url, options));\n    }\n    options(url, options) {\n      return this.fazerRequisicao(() => super.options(url, options));\n    }\n    get(url, options) {\n      return this.fazerRequisicao(() => super.get(url, options));\n    }\n    post(url, body, options) {\n      return this.fazerRequisicao(() => super.post(url, body, options));\n    }\n    put(url, body, options) {\n      return this.fazerRequisicao(() => super.put(url, body, options));\n    }\n    fazerRequisicao(fn) {\n      /*if (this.auth.isAccessTokenInvalido()) {\n        console.log('Requisição HTTP com access token inválido. Obtendo novo token...');\n             const chamadaNovoAccessToken = this.auth.obterNovoAccessToken()\n          .then(() => {\n            if (this.auth.isAccessTokenInvalido()) {\n              throw new NotAuthenticatedError();\n            }\n                 return fn().toPromise();\n          });\n             return observableFromPromise(chamadaNovoAccessToken);\n      } else {*/\n      return fn();\n      // }\n    }\n    static #_ = this.ɵfac = function HelperHttp_Factory(t) {\n      return new (t || HelperHttp)(i0.ɵɵinject(i1.HttpHandler));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HelperHttp,\n      factory: HelperHttp.ɵfac\n    });\n  }\n  return HelperHttp;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}