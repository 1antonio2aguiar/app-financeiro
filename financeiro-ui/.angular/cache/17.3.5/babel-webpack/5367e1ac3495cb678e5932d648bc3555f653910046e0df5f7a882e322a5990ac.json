{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BaseResourceService } from './../../../shared/services/base-resource.service';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Documentos } from 'src/app/shared/models/documentos';\nimport * as i0 from \"@angular/core\";\nexport let DocumentosService = /*#__PURE__*/(() => {\n  class DocumentosService extends BaseResourceService {\n    constructor(injector) {\n      super(environment.apiUrl + 'documentos', injector, Documentos.fromJson);\n      this.injector = injector;\n      //private documentosId: Documentos;\n      this.header = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // Lista de documentos por pessoa\n      this.documentosEventHendler = new EventEmitter();\n      this.documentos = [];\n      // documentos por id\n      this.documentosEventHendlerId = new EventEmitter();\n    }\n    // Busca lista de documentos por pessoa\n    listAll(pessoa) {\n      console.log(\"ESTA NO SERVICE \", pessoa);\n      return this.http.get(this.apiPath + '/findByPessoaId?pessoaId=' + pessoa).toPromise().then(response => {\n        this.documentosEventHendler.emit(response);\n      });\n    }\n    documentosChangeSubscribe(callBack) {\n      this.documentosEventHendler.subscribe(callBack);\n    }\n    // Busca documentos por ID\n    buscaDocumento(documentoId) {\n      return this.http.get(this.apiPath + '/' + documentoId).toPromise().then(response => {\n        this.documentosEventHendlerId.emit(response);\n      });\n    }\n    buscaDocumentoId(documentoId) {\n      return this.http.get(this.apiPath + '/' + documentoId).toPromise();\n    }\n    documentosEditSubscribeId(callBack) {\n      this.documentosEventHendlerId.subscribe(callBack);\n    }\n    createDocumento(resource) {\n      return this.http.post(this.apiPath, resource, {\n        headers: this.header\n      }).toPromise().then(response => response);\n    }\n    updateDocumento(resource) {\n      return this.http.put(this.apiPath + '/' + JSON.parse(resource).id, resource, {\n        headers: this.header\n      }).toPromise().then(response => response);\n    }\n    deleteDocumento(id) {\n      return this.http.delete(this.apiPath + '/' + id).toPromise().then(response => response);\n    }\n    static #_ = this.ɵfac = function DocumentosService_Factory(t) {\n      return new (t || DocumentosService)(i0.ɵɵinject(i0.Injector));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DocumentosService,\n      factory: DocumentosService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DocumentosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}