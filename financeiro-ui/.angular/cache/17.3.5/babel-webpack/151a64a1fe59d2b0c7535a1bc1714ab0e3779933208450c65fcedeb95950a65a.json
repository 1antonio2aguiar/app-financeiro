{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { MessageService } from 'primeng/api';\nimport { BaseResourceFormComponent } from '../../../../shared/components/base-resource-form/base-resource-form.component';\nimport { Validators } from '@angular/forms';\nimport { DialogService } from 'primeng';\nimport { environment } from 'src/environments/environment';\nimport { Enderecos } from './../../../../shared/models/enderecos';\nimport { CidadesModalComponent } from '../../../cidades/cidades-modal/cidades-modal.component';\nimport { BairrosModalComponent } from './../../../bairros/bairros-modal/bairros-modal.component';\nimport { LogradourosModalComponent } from './../../../logradouros/logradouros-modal/logradouros-modal.component';\nimport { CepsModalComponent } from '../../../ceps/ceps-modal/ceps-modal.component';\nlet EnderecosModalComponent = class EnderecosModalComponent extends BaseResourceFormComponent {\n  constructor(enderecosService, injector, messageService, dialogService, ref) {\n    super(injector, new Enderecos(), enderecosService, Enderecos.fromJson, new MessageService());\n    this.enderecosService = enderecosService;\n    this.injector = injector;\n    this.messageService = messageService;\n    this.dialogService = dialogService;\n    this.ref = ref;\n    this.tiposEnderecosList = [{\n      value: 'R',\n      selected: false,\n      label: 'RESIDENCIAL'\n    }, {\n      value: 'C',\n      selected: false,\n      label: 'COMERCIAL'\n    }];\n    this.env = environment;\n    this.enderecoId = 0;\n    this.masks = {\n      mask: [{\n        mask: '00.000-000'\n      }]\n    };\n    //Move os dados da pessoas para o modal de cadastro de enderecos\n    this.dadosPessoa = document.getElementById('nome').value + ' CPF: ' + document.getElementById('cpfCnpj').value;\n    //this.loadTipoLogradouro();\n    this.buildResourceForm(); /*limpa o formulario/resourceForm */\n    if (this.env.currentActionGlobal != \"DELETE\") {\n      this.env.botaoOnOf = false;\n      this.env.botaoOnOfCep = false;\n    } else {\n      this.env.botaoOnOf = true;\n      this.env.botaoOnOfCep = true;\n    }\n  }\n  buildResourceForm() {\n    this.resourceForm = this.formBuilder.group({\n      id: [null],\n      pessoa: [document.getElementById('id').value],\n      tipoEndereco: [null, [Validators.required]],\n      cidades: this.formBuilder.group({\n        estados: this.formBuilder.group({\n          uf: [null]\n        }),\n        id: [null],\n        nome: [null]\n      }),\n      bairros: this.formBuilder.group({\n        id: [null, [Validators.required, Validators.maxLength(10)]],\n        nome: [null]\n      }),\n      bairro: [null],\n      logradouros: this.formBuilder.group({\n        id: [null, [Validators.required, Validators.maxLength(15)]],\n        nome: [null],\n        tiposLogradouros: this.formBuilder.group({\n          sigla: [null]\n        })\n      }),\n      logradouro: [null],\n      ceps: this.formBuilder.group({\n        cep: [null]\n      }),\n      cep: [null],\n      numero: [null, [Validators.required, Validators.minLength(1)]],\n      complemento: [null]\n    });\n  }\n  submitForm() {\n    //this.submittingForm = true;\n    if (this.env.currentActionGlobal === 'NEW') {\n      // clicou no + (novo)\n      this.createResource();\n    } else {\n      if (this.env.currentActionGlobal === 'EDIT') {\n        // clicou no update\n        this.updateResource();\n      } else {\n        // clicou no delete\n        this.deleteResource();\n      }\n    }\n  }\n  deleteResource() {\n    this.enderecosService.deleteEndereco(this.enderecoId).then(response => {\n      this.buildResourceForm(); /*limpa o formulario/resorceForm*/\n      this.ref.close();\n    });\n  }\n  updateResource() {\n    const resource = this.jsonDataToResourceFn(this.resourceForm.value);\n    // copia os dados de Enderecos(classe) para enderecos(variavel json)\n    let enderecos = JSON.stringify(resource);\n    // Chama a funcao que faz update\n    this.enderecosService.updateEndereco(enderecos).then(response => {\n      this.buildResourceForm(); /*limpa o formulario/resorceForm*/\n      this.ref.close();\n    });\n  }\n  createResource() {\n    const resource = this.jsonDataToResourceFn(this.resourceForm.value);\n    // copia os dados de Enderecos(classe) para enderecos(variavel json)\n    let enderecos = JSON.stringify(resource);\n    // Chama a funcao que insere\n    this.enderecosService.createEndereco(enderecos).then(response => {\n      this.buildResourceForm(); /*limpa o formulario/resorceForm*/\n      this.ref.close();\n    }).catch(error => {\n      console.log(error);\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Erro',\n        detail: error.error[0].mensagemUsuario\n      });\n    });\n  }\n  fecharModal() {\n    this.ref.close();\n  }\n  //Modal CEP\n  showCeps($event) {\n    const ref = this.dialogService.open(CepsModalComponent, {\n      header: 'Selecione o CEP',\n      width: '70%'\n    });\n    ref.onClose.subscribe(cep => {\n      this.env.botaoOnOf = true;\n      //console.log(cep);\n      this.resourceForm.patchValue({\n        ceps: {\n          id: cep.id,\n          cep: cep.cep\n        },\n        cep: cep.id\n      });\n      this.resourceForm.patchValue({\n        cidades: {\n          id: cep.bairros.cidades.id,\n          nome: cep.bairros.cidades.nome,\n          estados: {\n            uf: cep.bairros.cidades.estados.uf\n          }\n        }\n      });\n      this.resourceForm.patchValue({\n        bairros: {\n          id: cep.bairros.id,\n          nome: cep.bairros.nome\n        },\n        bairro: cep.bairros.id\n      });\n      this.resourceForm.patchValue({\n        logradouros: {\n          id: cep.logradouros.id,\n          nome: cep.logradouros.nome,\n          tiposLogradouros: {\n            sigla: cep.logradouros.tiposLogradouros.sigla\n          }\n        },\n        logradouro: cep.logradouros.id\n      });\n    });\n  }\n  // Modal Cidade/distrito/estado\n  showCidades($event) {\n    const ref = this.dialogService.open(CidadesModalComponent, {\n      header: 'Selecione a Cidade',\n      width: '70%'\n    });\n    ref.onClose.subscribe(cidade => {\n      this.resourceForm.patchValue({\n        cidades: {\n          id: cidade.id,\n          nome: cidade.nome,\n          estados: {\n            uf: cidade.estados.uf\n          }\n        }\n      });\n    });\n  }\n  // Modal Bairro\n  showBairros($event) {\n    const ref = this.dialogService.open(BairrosModalComponent, {\n      header: 'Selecione o Bairro',\n      width: '70%',\n      data: {\n        // parte de filtrar bairros da cidade\n        idCidade: this.resourceForm.get('cidades').get('id').value\n      }\n    });\n    ref.onClose.subscribe(bairro => {\n      this.resourceForm.patchValue({\n        bairros: {\n          id: bairro.id,\n          nome: bairro.nome\n        }\n      });\n    });\n  }\n  // Modal Logradouro\n  showLogradouros($event) {\n    const ref = this.dialogService.open(LogradourosModalComponent, {\n      header: 'Selecione o Logradouro',\n      width: '70%',\n      data: {\n        // parte de filtrar logradouros da cidade\n        idCidade: this.resourceForm.get('cidades').get('id').value\n      }\n    });\n    ref.onClose.subscribe(logradouro => {\n      this.resourceForm.patchValue({\n        logradouros: {\n          id: logradouro.id,\n          nome: logradouro.nome,\n          tiposLogradouros: {\n            sigla: logradouro.tiposLogradouros.sigla\n          }\n        }\n      });\n    });\n  }\n  // No edit retorna os dados aqui.\n  ngOnInit() {\n    this.enderecosService.enderecosEditSubscribeId(resources => {\n      this.enderecoId = resources.id;\n      this.resourceForm.patchValue({\n        tipoEndereco: resources.tipoEndereco,\n        cidades: {\n          estados: {\n            uf: resources.bairros.cidades.estados.uf\n          },\n          nome: resources.bairros.cidades.nome\n        },\n        bairros: {\n          id: resources.bairros.id,\n          nome: resources.bairros.nome\n        },\n        bairro: resources.bairros.id,\n        logradouros: {\n          id: resources.logradouros.id,\n          nome: resources.logradouros.nome,\n          tiposLogradouros: {\n            sigla: resources.logradouros.tiposLogradouros.sigla\n          }\n        },\n        logradouro: resources.logradouros.id,\n        ceps: {\n          id: resources.ceps.id,\n          cep: resources.ceps.cep\n        },\n        cep: resources.ceps.id,\n        id: resources.id,\n        numero: resources.numero,\n        complemento: resources.complemento\n      });\n    });\n    if (this.env.currentActionGlobal === \"DELETE\") {\n      document.getElementById('numero').disabled = true;\n      document.getElementById('complemento').disabled = true;\n      document.getElementById('btnCep').style.display = \"none\";\n      document.getElementById('btnCidade').style.display = \"none\";\n      document.getElementById('btnBairro').style.display = \"none\";\n      document.getElementById('btnLogradouro').style.display = \"none\";\n    } else {\n      document.getElementById('numero').disabled = false;\n      document.getElementById('complemento').disabled = false;\n      if (this.env.currentActionGlobal === \"EDIT\") {\n        this.env.botaoOnOf = true;\n        this.env.botaoOnOfCep = true;\n      }\n      //(<HTMLSelectElement>document.getElementById('btnCep')).style.display = \"block\";\n    }\n  }\n};\nEnderecosModalComponent = __decorate([Component({\n  selector: 'app-enderecos-modal',\n  templateUrl: './enderecos-modal.component.html',\n  styleUrls: ['./enderecos-modal.component.css'],\n  // Isso aqui que resolve o problema de bloqueio de tela no modal\n  // Isso que o gabriel pos por conta do modal bloqueando tela\n  providers: [DialogService]\n})], EnderecosModalComponent);\nexport { EnderecosModalComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}