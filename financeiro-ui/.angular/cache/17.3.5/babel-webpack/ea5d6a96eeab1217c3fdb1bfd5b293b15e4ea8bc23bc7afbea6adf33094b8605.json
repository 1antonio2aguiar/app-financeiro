{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, PLATFORM_ID, booleanAttribute, Directive, Inject, Input, Output, HostListener, NgModule } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT, CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { NG_VALIDATORS } from '@angular/forms';\nconst KEYFILTER_VALIDATOR = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => KeyFilter),\n  multi: true\n};\nconst DEFAULT_MASKS = {\n  pint: /[\\d]/,\n  int: /[\\d\\-]/,\n  pnum: /[\\d\\.]/,\n  money: /[\\d\\.\\s,]/,\n  num: /[\\d\\-\\.]/,\n  hex: /[0-9a-f]/i,\n  email: /[a-z0-9_\\.\\-@]/i,\n  alpha: /[a-z_]/i,\n  alphanum: /[a-z0-9_]/i\n};\nconst KEYS = {\n  TAB: 9,\n  RETURN: 13,\n  ESC: 27,\n  BACKSPACE: 8,\n  DELETE: 46\n};\nconst SAFARI_KEYS = {\n  63234: 37,\n  63235: 39,\n  63232: 38,\n  63233: 40,\n  63276: 33,\n  63277: 34,\n  63272: 46,\n  63273: 36,\n  63275: 35 // end\n};\n/**\n * KeyFilter Directive is a built-in feature of InputText to restrict user input based on a regular expression.\n * @group Components\n */\nlet KeyFilter = /*#__PURE__*/(() => {\n  class KeyFilter {\n    document;\n    platformId;\n    el;\n    /**\n     * When enabled, instead of blocking keys, input is validated internally to test against the regular expression.\n     * @group Props\n     */\n    pValidateOnly;\n    /**\n     * Sets the pattern for key filtering.\n     * @group Props\n     */\n    set pattern(_pattern) {\n      this._pattern = _pattern;\n      if (_pattern instanceof RegExp) {\n        this.regex = _pattern;\n      } else if (_pattern in DEFAULT_MASKS) {\n        this.regex = DEFAULT_MASKS[_pattern];\n      } else {\n        this.regex = /./;\n      }\n    }\n    get pattern() {\n      return this._pattern;\n    }\n    /**\n     * Emits a value whenever the ngModel of the component changes.\n     * @param {(string | number)} modelValue - Custom model change event.\n     * @group Emits\n     */\n    ngModelChange = new EventEmitter();\n    regex = /./;\n    _pattern;\n    isAndroid;\n    lastValue;\n    constructor(document, platformId, el) {\n      this.document = document;\n      this.platformId = platformId;\n      this.el = el;\n      if (isPlatformBrowser(this.platformId)) {\n        this.isAndroid = DomHandler.isAndroid();\n      } else {\n        this.isAndroid = false;\n      }\n    }\n    isNavKeyPress(e) {\n      let k = e.keyCode;\n      k = DomHandler.getBrowser().safari ? SAFARI_KEYS[k] || k : k;\n      return k >= 33 && k <= 40 || k == KEYS.RETURN || k == KEYS.TAB || k == KEYS.ESC;\n    }\n    isSpecialKey(e) {\n      let k = e.keyCode || e.charCode;\n      return k == 9 || k == 13 || k == 27 || k == 16 || k == 17 || k >= 18 && k <= 20 || DomHandler.getBrowser().opera && !e.shiftKey && (k == 8 || k >= 33 && k <= 35 || k >= 36 && k <= 39 || k >= 44 && k <= 45);\n    }\n    getKey(e) {\n      let k = e.keyCode || e.charCode;\n      return DomHandler.getBrowser().safari ? SAFARI_KEYS[k] || k : k;\n    }\n    getCharCode(e) {\n      return e.charCode || e.keyCode || e.which;\n    }\n    findDelta(value, prevValue) {\n      let delta = '';\n      for (let i = 0; i < value.length; i++) {\n        let str = value.substr(0, i) + value.substr(i + value.length - prevValue.length);\n        if (str === prevValue) delta = value.substr(i, value.length - prevValue.length);\n      }\n      return delta;\n    }\n    isValidChar(c) {\n      return this.regex.test(c);\n    }\n    isValidString(str) {\n      for (let i = 0; i < str.length; i++) {\n        if (!this.isValidChar(str.substr(i, 1))) {\n          return false;\n        }\n      }\n      return true;\n    }\n    onInput(e) {\n      if (this.isAndroid && !this.pValidateOnly) {\n        let val = this.el.nativeElement.value;\n        let lastVal = this.lastValue || '';\n        let inserted = this.findDelta(val, lastVal);\n        let removed = this.findDelta(lastVal, val);\n        let pasted = inserted.length > 1 || !inserted && !removed;\n        if (pasted) {\n          if (!this.isValidString(val)) {\n            this.el.nativeElement.value = lastVal;\n            this.ngModelChange.emit(lastVal);\n          }\n        } else if (!removed) {\n          if (!this.isValidChar(inserted)) {\n            this.el.nativeElement.value = lastVal;\n            this.ngModelChange.emit(lastVal);\n          }\n        }\n        val = this.el.nativeElement.value;\n        if (this.isValidString(val)) {\n          this.lastValue = val;\n        }\n      }\n    }\n    onKeyPress(e) {\n      if (this.isAndroid || this.pValidateOnly) {\n        return;\n      }\n      let browser = DomHandler.getBrowser();\n      let k = this.getKey(e);\n      if (browser.mozilla && (e.ctrlKey || e.altKey)) {\n        return;\n      } else if (k == 17 || k == 18) {\n        return;\n      }\n      // Enter key\n      if (k == 13) {\n        return;\n      }\n      let c = this.getCharCode(e);\n      let cc = String.fromCharCode(c);\n      let ok = true;\n      if (!browser.mozilla && (this.isSpecialKey(e) || !cc)) {\n        return;\n      }\n      ok = this.regex.test(cc);\n      if (!ok) {\n        e.preventDefault();\n      }\n    }\n    onPaste(e) {\n      const clipboardData = e.clipboardData || this.document.defaultView.clipboardData.getData('text');\n      if (clipboardData) {\n        let pattern = /\\{[0-9]+\\}/;\n        const pastedText = clipboardData.getData('text');\n        if (pattern.test(this.regex.toString())) {\n          if (!this.regex.test(pastedText)) {\n            e.preventDefault();\n            return;\n          }\n        } else {\n          for (let char of pastedText.toString()) {\n            if (!this.regex.test(char)) {\n              e.preventDefault();\n              return;\n            }\n          }\n        }\n      }\n    }\n    validate(c) {\n      if (this.pValidateOnly) {\n        let value = this.el.nativeElement.value;\n        if (value && !this.regex.test(value)) {\n          return {\n            validatePattern: false\n          };\n        }\n      }\n    }\n    static ɵfac = function KeyFilter_Factory(t) {\n      return new (t || KeyFilter)(i0.ɵɵdirectiveInject(DOCUMENT), i0.ɵɵdirectiveInject(PLATFORM_ID), i0.ɵɵdirectiveInject(i0.ElementRef));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: KeyFilter,\n      selectors: [[\"\", \"pKeyFilter\", \"\"]],\n      hostAttrs: [1, \"p-element\"],\n      hostBindings: function KeyFilter_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function KeyFilter_input_HostBindingHandler($event) {\n            return ctx.onInput($event);\n          })(\"keypress\", function KeyFilter_keypress_HostBindingHandler($event) {\n            return ctx.onKeyPress($event);\n          })(\"paste\", function KeyFilter_paste_HostBindingHandler($event) {\n            return ctx.onPaste($event);\n          });\n        }\n      },\n      inputs: {\n        pValidateOnly: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"pValidateOnly\", \"pValidateOnly\", booleanAttribute],\n        pattern: [i0.ɵɵInputFlags.None, \"pKeyFilter\", \"pattern\"]\n      },\n      outputs: {\n        ngModelChange: \"ngModelChange\"\n      },\n      features: [i0.ɵɵProvidersFeature([KEYFILTER_VALIDATOR]), i0.ɵɵInputTransformsFeature]\n    });\n  }\n  return KeyFilter;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet KeyFilterModule = /*#__PURE__*/(() => {\n  class KeyFilterModule {\n    static ɵfac = function KeyFilterModule_Factory(t) {\n      return new (t || KeyFilterModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: KeyFilterModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CommonModule]\n    });\n  }\n  return KeyFilterModule;\n})();\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { KEYFILTER_VALIDATOR, KeyFilter, KeyFilterModule };\n//# sourceMappingURL=primeng-keyfilter.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}