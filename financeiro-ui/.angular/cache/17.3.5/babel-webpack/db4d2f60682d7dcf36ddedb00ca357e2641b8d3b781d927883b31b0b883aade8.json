{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { BaseResourceService } from './../../../shared/services/base-resource.service';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { ParcelasContratos } from 'src/app/shared/models/parcelas-contratos';\nimport * as i0 from \"@angular/core\";\nexport let ParcelasContratosService = /*#__PURE__*/(() => {\n  class ParcelasContratosService extends BaseResourceService {\n    constructor(injector) {\n      super(environment.apiUrl + 'parcelasContratos', injector, ParcelasContratos.fromJson);\n      this.injector = injector;\n      this.header = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n      // Lista de parcelas por contrato\n      this.parcelasContratosEventHendler = new EventEmitter();\n      // Contratos por id\n      this.parcelasContratosEventHendlerId = new EventEmitter();\n    }\n    listAllNoPaginacao(contrato) {\n      return this.http.get(this.apiPath + '/findByContratosId?contratoId=' + contrato).toPromise().then(response => {\n        //console.log(\"Result \", response)\n        this.parcelasContratosEventHendler.emit(response.sort(function (a, b) {\n          return a.parcela < b.parcela ? -1 : a.parcela > b.parcela ? 1 : 0;\n        }));\n      });\n    }\n    listAllYesPaginacao(filtro) {\n      let params = filtro.params;\n      //var paramContrato = params['updates'][0]['value'];\n      params = params.append('page', filtro.pagina.toString()).append('size', filtro.itensPorPagina.toString());\n      return this.http.get(this.apiPath + '/', {\n        params\n      }).toPromise().then(response => {\n        this.parcelasContratosEventHendler.emit(response);\n      });\n    }\n    pesquisar(filtro) {\n      let params = filtro.params;\n      params = params.append('page', filtro.pagina.toString()).append('size', filtro.itensPorPagina.toString());\n      return this.http.get(this.apiPath + '/', {\n        params\n      }).toPromise().then(response => {\n        return response;\n      });\n    }\n    parcelasContratosChangeSubscribe(callBack) {\n      this.parcelasContratosEventHendler.subscribe(callBack);\n    }\n    // Busca parcela por ID\n    buscaParcelaContrato(contratoId) {\n      return this.http.get(this.apiPath + '/' + contratoId).toPromise().then(response => {\n        this.parcelasContratosEventHendlerId.emit(response);\n      });\n    }\n    // Busca a proxima parcela a ser cadastrada\n    buscaMaxParcelaContrato(contrato) {\n      return this.http.get(this.apiPath + '/findMaxParcela?contratoId=' + contrato).toPromise().then(response => {\n        this.parcelasContratosEventHendlerId.emit(response);\n      });\n    }\n    parcelasContratosEditSubscribeId(callBack) {\n      this.parcelasContratosEventHendlerId.subscribe(callBack);\n    }\n    createParcelaContrato(resource) {\n      console.log(\"Criando parcela\");\n      return this.http.post(this.apiPath + '', resource, {\n        headers: this.header\n      }).toPromise().then(response => response);\n    }\n    updateParcelaContrato(resource) {\n      return this.http.put(this.apiPath + '/' + JSON.parse(resource).id, resource, {\n        headers: this.header\n      }).toPromise().then(response => response);\n    }\n    deleteParcelaContrato(id) {\n      return this.http.delete(this.apiPath + '/' + id).toPromise().then(response => response);\n    }\n    static #_ = this.ɵfac = function ParcelasContratosService_Factory(t) {\n      return new (t || ParcelasContratosService)(i0.ɵɵinject(i0.Injector));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ParcelasContratosService,\n      factory: ParcelasContratosService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ParcelasContratosService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}