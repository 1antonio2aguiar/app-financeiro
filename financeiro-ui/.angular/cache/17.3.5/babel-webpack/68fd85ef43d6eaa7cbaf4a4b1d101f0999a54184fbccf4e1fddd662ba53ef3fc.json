{"ast":null,"code":"import { HttpParams, HttpHeaders } from '@angular/common/http';\nimport { environment } from './../../environments/environment';\nimport { Usuarios } from './../shared/models/usuarios';\nimport { BaseResourceService } from '../shared/services/base-resource.service';\nimport * as i0 from \"@angular/core\";\nexport let SegurancaService = /*#__PURE__*/(() => {\n  class SegurancaService extends BaseResourceService {\n    constructor(injector) {\n      super(environment.apiUrl + 'login', injector, Usuarios.fromJson);\n      this.injector = injector;\n      this.header = new HttpHeaders({\n        Authorization: 'Basic ' + btoa('codiub:C0D1UB'),\n        'Content-Type': 'application/json'\n      });\n    }\n    /** MÉTODO POST DE LOGIN, PARÂMETROS E HEADER SÃO DIFERENTES.\n    *  NO HEADER VOCÊ TEM QUE ADICIONAR O CONTENT-TYPE: APPLICATION/JSON\n    *  OS PARÂMETROS SÃO PASSADOS APÓS A URL NUM JSON.STRINGIFY\n    *  E O HEADER É PASSADO SOZINHO, TUDO COMO ESTÁ ABAIXO\n    */\n    login(usuario, senhaP, empresa, sistema) {\n      const param = {\n        'cpfCnpj': usuario,\n        'senha': senhaP,\n        empresa,\n        sistema\n      };\n      //ATE AQUI\n      return this.http.post(environment.apiUrlKripton + 'login', JSON.stringify(param), {\n        headers: this.header\n      }).toPromise().then(response => {\n        return response;\n      });\n    }\n    trocarSenha(usuario, senhaP, novaSenhaP, repitaSenhaP) {\n      const requestJson = {\n        cpfCnpj: usuario,\n        senha: senhaP,\n        novaSenha: novaSenhaP,\n        repitaSenha: repitaSenhaP\n      };\n      return this.http.put(environment.apiUrlKripton + 'troca-senha', JSON.stringify(requestJson), {\n        headers: this.header.append('Content-Type', 'application/json')\n      }).toPromise().then(response => {\n        return response;\n      });\n    }\n    recuperarSenhaEmail(email) {\n      const param = new HttpParams();\n      return this.http.get(environment.apiUrlKripton + 'recuperarSenha/email/' + email, {\n        headers: this.header,\n        params: param\n      }).toPromise().then(response => {\n        return response;\n      });\n    }\n    recuperarSenhacpfCnpj(cpfCnpj) {\n      const param = new HttpParams();\n      return this.http.get(environment.apiUrlKripton + 'recuperarSenha/cpfCnpj/' + cpfCnpj, {\n        headers: this.header,\n        params: param\n      }).toPromise().then(response => {\n        return response;\n      });\n    }\n    static #_ = this.ɵfac = function SegurancaService_Factory(t) {\n      return new (t || SegurancaService)(i0.ɵɵinject(i0.Injector));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: SegurancaService,\n      factory: SegurancaService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return SegurancaService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}