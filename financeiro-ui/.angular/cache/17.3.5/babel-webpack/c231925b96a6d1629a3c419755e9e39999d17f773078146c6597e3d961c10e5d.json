{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { MessageService } from 'primeng/api';\nimport { Component } from '@angular/core';\nimport { BaseResourceFormComponent } from '../../../shared/components/base-resource-form/base-resource-form.component';\nimport { Validators } from '@angular/forms';\nimport { Ceps } from './../../../shared/models/ceps';\nimport { CidadesModalComponent } from './../../cidades/cidades-modal/cidades-modal.component';\nimport { BairrosModalComponent } from './../../bairros/bairros-modal/bairros-modal.component';\nimport { LogradourosModalComponent } from './../../logradouros/logradouros-modal/logradouros-modal.component';\nlet CepsCadastroComponent = class CepsCadastroComponent extends BaseResourceFormComponent {\n  constructor(cepsService, bairrosService, logradourosService, injector, dialogService) {\n    super(injector, new Ceps(), cepsService, Ceps.fromJson, new MessageService());\n    this.cepsService = cepsService;\n    this.bairrosService = bairrosService;\n    this.logradourosService = logradourosService;\n    this.injector = injector;\n    this.dialogService = dialogService;\n    this.bairroList = [];\n    this.logradouroList = [];\n    this.botaoOnOf = false;\n    this.identificacao = [{\n      value: 'U',\n      label: 'Ãšnico'\n    }, {\n      value: 'D',\n      label: 'Direita'\n    }, {\n      value: 'E',\n      label: 'Esquerda'\n    }, {\n      value: 'I',\n      label: 'Impar'\n    }, {\n      value: 'P',\n      label: 'par'\n    }, {\n      value: 'A',\n      label: 'Ambos'\n    }];\n    this.masks = {\n      mask: [{\n        mask: '00.000-000'\n      }]\n    };\n  }\n  buildResourceForm() {\n    this.resourceForm = this.formBuilder.group({\n      id: [null],\n      cep: [null, [Validators.required]],\n      numeroIni: [1],\n      numeroFin: [999999999],\n      identificacao: [\"U\"],\n      cidades: this.formBuilder.group({\n        estados: this.formBuilder.group({\n          uf: [null],\n          nome: [null]\n        }),\n        id: [null, [Validators.required]],\n        nome: [null]\n      }),\n      bairrosId: [null],\n      bairros: this.formBuilder.group({\n        id: [null, [Validators.required, Validators.maxLength(10)]],\n        nome: [null]\n      }),\n      logradourosId: [null],\n      logradouros: this.formBuilder.group({\n        id: [null, [Validators.required, Validators.maxLength(10)]],\n        nome: [null],\n        tiposLogradouros: this.formBuilder.group({\n          sigla: [null]\n        })\n      })\n    });\n  }\n  creationPageTitle() {\n    this.botaoOnOf = false;\n    return 'Cadastro de Novo Ceps';\n  }\n  editionPageTitle() {\n    this.botaoOnOf = true;\n    return 'Editando Ceps: ';\n  }\n  // Modal Cidade/estado\n  showCidades($event) {\n    const ref = this.dialogService.open(CidadesModalComponent, {\n      header: 'Selecione a Cidade',\n      width: '70%'\n    });\n    ref.onClose.subscribe(cidade => {\n      //console.log(cidade);\n      this.resourceForm.patchValue({\n        cidades: {\n          id: cidade.id,\n          nome: cidade.nome,\n          estados: {\n            uf: cidade.estados.uf,\n            nome: cidade.estados.nome\n          }\n        },\n        cidadesId: cidade.id\n      });\n    });\n  }\n  // Modal Bairro\n  showBairros($event) {\n    const ref = this.dialogService.open(BairrosModalComponent, {\n      header: 'Selecione o Bairro',\n      width: '70%',\n      data: {\n        // parte de filtrar bairros da cidade\n        idCidade: this.resourceForm.get('cidades').get('id').value\n      }\n    });\n    ref.onClose.subscribe(bairro => {\n      this.resourceForm.patchValue({\n        bairros: {\n          id: bairro.id,\n          nome: bairro.nome\n        },\n        bairrosId: bairro.id\n      });\n    });\n  }\n  // Modal Logradouro\n  showLogradouros($event) {\n    const ref = this.dialogService.open(LogradourosModalComponent, {\n      header: 'Selecione o Logradouro',\n      width: '70%',\n      data: {\n        // parte de filtrar logradouros da cidade\n        idCidade: this.resourceForm.get('cidades').get('id').value\n      }\n    });\n    ref.onClose.subscribe(logradouro => {\n      this.resourceForm.patchValue({\n        logradouros: {\n          id: logradouro.id,\n          nome: logradouro.nome,\n          tiposLogradouros: {\n            sigla: logradouro.tiposLogradouros.sigla\n          }\n        },\n        logradourosId: logradouro.id\n      });\n    });\n  }\n  createResource() {\n    const resource = Ceps.fromJson(this.resourceForm.value);\n    this.resourceService.create(resource).subscribe(result => {\n      this.actionsForSuccess(result);\n    }, error => this.actionsForError(error));\n  }\n  updateResource() {\n    const resource = Ceps.toJson(this.resourceForm.value);\n    this.resourceService.update(resource).subscribe(resource => {\n      this.actionsForSuccess(resource);\n    }, error => this.actionsForError(error));\n  }\n};\nCepsCadastroComponent = __decorate([Component({\n  selector: 'app-ceps-cadastro',\n  templateUrl: './ceps-cadastro.component.html',\n  styleUrls: ['./ceps-cadastro.component.css']\n})], CepsCadastroComponent);\nexport { CepsCadastroComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}