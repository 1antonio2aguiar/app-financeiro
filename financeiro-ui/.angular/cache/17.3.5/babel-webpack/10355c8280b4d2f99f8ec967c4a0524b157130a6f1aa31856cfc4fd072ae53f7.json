{"ast":null,"code":"import { FormBuilder } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { switchMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/base-resource.service\";\nimport * as i2 from \"primeng/api\";\nexport let BaseResourceFormComponent = /*#__PURE__*/(() => {\n  class BaseResourceFormComponent {\n    constructor(injector, resource, resourceService, jsonDataToResourceFn, messageService) {\n      this.injector = injector;\n      this.resource = resource;\n      this.resourceService = resourceService;\n      this.jsonDataToResourceFn = jsonDataToResourceFn;\n      this.messageService = messageService;\n      this.serverErrorMessages = null;\n      // tslint:disable-next-line:no-inferrable-types\n      this.submittingForm = false;\n      this.route = this.injector.get(ActivatedRoute);\n      this.router = this.injector.get(Router);\n      this.formBuilder = this.injector.get(FormBuilder);\n    }\n    ngOnInit() {\n      this.setCurrentAction();\n      this.buildResourceForm();\n      this.loadResource();\n    }\n    // tslint:disable-next-line:use-life-cycle-interface\n    ngAfterContentChecked() {\n      this.setPageTitle();\n    }\n    submitForm() {\n      this.submittingForm = true;\n      if (this.currentAction == 'new') {\n        this.createResource();\n      } else {\n        this.updateResource();\n      }\n    }\n    // PROTECTED METHODS\n    setCurrentAction() {\n      // tslint:disable-next-line:triple-equals\n      if (this.route.snapshot.url[0].path == 'new') {\n        this.currentAction = 'new';\n      } else {\n        this.currentAction = 'edit';\n      }\n    }\n    loadResource() {\n      // tslint:disable-next-line:triple-equals\n      if (this.currentAction == 'edit') {\n        this.route.paramMap.pipe(switchMap(params => this.resourceService.getById(+params.get('id')))).subscribe(resource => {\n          this.resource = resource;\n          this.resourceForm.patchValue(resource);\n        }, error => alert('Ocorreu um erro no servidor, tente mais tarde.'));\n      }\n    }\n    loadLocale() {\n      return {\n        firstDayOfWeek: 0,\n        dayNames: ['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado'],\n        dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab'],\n        dayNamesMin: ['Do', 'Se', 'Te', 'Qu', 'Qu', 'Se', 'Sa'],\n        monthNames: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'],\n        monthNamesShort: ['Jan', 'Fev', 'Mar', 'Abr', 'Mai', 'Jun', 'Jul', 'Ago', 'Set', 'Out', 'Nov', 'Dez'],\n        today: 'Hoje',\n        clear: 'Limpar',\n        dateFormat: 'dd/mm/yy'\n      };\n    }\n    setPageTitle() {\n      // tslint:disable-next-line:triple-equals\n      if (this.currentAction == 'new') {\n        this.pageTitle = this.creationPageTitle();\n      } else {\n        this.pageTitle = this.editionPageTitle();\n      }\n    }\n    creationPageTitle() {\n      return 'novo';\n    }\n    editionPageTitle() {\n      return 'Edição';\n    }\n    createResource() {\n      const resource = this.jsonDataToResourceFn(this.resourceForm.value);\n      this.resourceService.create(resource)\n      // tslint:disable-next-line:no-shadowed-variable\n      .subscribe(result => {\n        this.actionsForSuccess(result);\n      }, error => this.actionsForError(error));\n    }\n    updateResource() {\n      const resource = this.jsonDataToResourceFn(this.resourceForm.value);\n      this.resourceService.update(resource).subscribe(\n      // tslint:disable-next-line:no-shadowed-variable\n      resource => this.actionsForSuccess(resource), error => this.actionsForError(error));\n    }\n    actionsForSuccess(resource) {\n      // toastr.success('Solicitação processado com sucesso');\n      this.messageService.add({\n        severity: 'success',\n        summary: 'Solicitação processado com sucesso',\n        detail: 'Solicitação processado com sucesso'\n      });\n      const baseComponentPath = this.route.snapshot.parent.url[0].path;\n      this.router.navigateByUrl(baseComponentPath, {\n        skipLocationChange: true\n      }).then(() => {\n        console.log(this.router);\n        return this.router.navigate(['/' + baseComponentPath]);\n      });\n    }\n    actionsForError(error) {\n      // toastr.error('Ocorreu um erro ao processar a sua solicitação');\n      this.messageService.add({\n        severity: 'error',\n        summary: 'Ocorreu um erro ao processar a sua solicitação',\n        detail: 'Ocorreu um erro ao processar a sua solicitação'\n      });\n      this.submittingForm = false;\n      if (error.status === 422) {\n        this.serverErrorMessages = JSON.parse(error._body).errors;\n      } else {\n        this.serverErrorMessages = ['Falha na comunicação com o servidor, tente mais tarde!'];\n      }\n    }\n    static #_ = this.ɵfac = function BaseResourceFormComponent_Factory(t) {\n      i0.ɵɵinvalidFactory();\n    };\n    static #_2 = this.ɵdir = /*@__PURE__*/i0.ɵɵdefineDirective({\n      type: BaseResourceFormComponent\n    });\n  }\n  return BaseResourceFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}